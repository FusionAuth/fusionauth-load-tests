/*
 * Copyright (c) 2018-2019, FusionAuth., All Rights Reserved
 */
savantVersion = "1.0.0"

domainVersion = "0.2.0"
fusionauthVersion = "1.7.1-{integration}"
javaErrorVersion = "2.2.0"
loadTestVersion = "0.4.2"
restifyVersion = "3.2.6"

project(group: "io.fusionauth", name: "fusionauth-load-tests", version: "1.7.1", licenses: ["Commercial"]) {
  workflow {
    standard()
    fetch {
      url(url: "http://savant.inversoft.com/internal/", username: global.internalRepositoryUsername, password: global.internalRepositoryPassword)
    }
  }

  publishWorkflow {
    subversion(repository: "http://svn.inversoft.com/internal/savant")
  }

  dependencies {
    group(name: "provided") {
      dependency(id: "javax.servlet:servlet-api:3.1.0", skipCompatibilityCheck: true)
    }
    group(name: "compile") {
      dependency(id: "com.google.inject:guice:4.2.0")
      dependency(id: "com.inversoft:inversoft-load-test:${loadTestVersion}")
      dependency(id: "com.inversoft:inversoft-domain:${domainVersion}")
      dependency(id: "com.inversoft:java-error:${javaErrorVersion}")
      dependency(id: "com.inversoft:restify:${restifyVersion}")
      dependency(id: "io.fusionauth:fusionauth-java-client:${fusionauthVersion}")
      dependency(id: "org.slf4j:slf4j-api:1.7.21")
    }
    group(name: "runtime") {
      dependency(id: "ch.qos.logback:logback-core:1.2.3")
      dependency(id: "ch.qos.logback:logback-classic:1.2.3")
      dependency(id: "org.ow2.asm:asm:6.1.1", skipCompatibilityCheck: true)
    }
    group(name: "test-compile", export: false) {
      dependency(id: "org.testng:testng:6.8.7")
    }
  }

  publications {
    standard()
  }
}

// Plugins
database = loadPlugin(id: "org.savantbuild.plugin:database:1.0.3")
dependency = loadPlugin(id: "org.savantbuild.plugin:dependency:1.0.2")
java = loadPlugin(id: "org.savantbuild.plugin:java:1.0.2")
javaTestNG = loadPlugin(id: "org.savantbuild.plugin:java-testng:1.0.2")
idea = loadPlugin(id: "org.savantbuild.plugin:idea:1.0.1")
release = loadPlugin(id: "org.savantbuild.plugin:release-git:${savantVersion}")
file = loadPlugin(id: "org.savantbuild.plugin:file:1.0.2")

idea.settings.moduleMap = [
    "io.fusionauth:fusionauth-java-client:${fusionauthVersion}" : "fusionauth-java-client",
]

java.settings.javaVersion = "1.8"
javaTestNG.settings.javaVersion = "1.8"

target(name: "clean", description: "Cleans the build directory") {
  java.clean()
}

target(name: "compile", description: "Compiles the Java source files") {
  java.compile()

  // Copy all compile dependencies to be able to run command line
  file.prune(dir: "lib/")
  dependency.copy(to: "lib") {
    dependencies(group: "compile", transitive: true, fetchSource: false)
    // Get rid of a slf4j warning by copying runtime deps (gets the logback-classic in the classpath)
    dependencies(group: "runtime", transitive: false, fetchSource: false)
  }
}

target(name: "config", description: "Configure FusionAuth for load testing") {

  ["mysql", "postgresql"].each { type ->
    database.settings.type = type
    database.settings.name = "fusionauth"

    // Insert a test API key
    database.execute(file: "src/test/db/authentication_key.sql")
  }

}

target(name: "jar", description: "Builds the project JARs", dependsOn: ["compile"]) {
  java.jar()
}

target(name: "test", description: "Runs the project's tests", dependsOn: ["jar"]) {
  javaTestNG.test()
}

target(name: "int", description: "Releases a local integration build of the project", dependsOn: ["test"]) {
  // Leave me blank please.
}

target(name: "release", description: "Releases a full version of the project", dependsOn: ["int"]) {
  release.release()
}

target(name: "idea", description: "Updates the IntelliJ IDEA module file") {
  idea.iml()
}

target(name: "print-dependency-tree", description: "Prints the dependency tree") {
  dependency.printFull()
}
