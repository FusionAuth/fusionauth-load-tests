/*
 * Copyright (c) 2018-2020, FusionAuth., All Rights Reserved
 */
savantVersion = "1.0.0"

fusionauthVersion = "1.22.4-{integration}"
jackson5Version = "2.4.5"
javaErrorVersion = "2.2.2"
restifyVersion = "3.4.1"

project(group: "io.fusionauth", name: "fusionauth-load-tests", version: "1.22.4", licenses: ["ApacheV2_0"]) {
  workflow {
    standard()
  }

  publishWorkflow {
    subversion(repository: "http://svn.inversoft.org/savant")
  }

  dependencies {
    group(name: "provided") {
      dependency(id: "javax.servlet:servlet-api:3.1.0", skipCompatibilityCheck: true)
    }
    group(name: "compile") {
      dependency(id: "com.fasterxml.jackson.core:jackson-annotations:2.10.3")
      dependency(id: "com.fasterxml.jackson.core:jackson-core:2.10.3")
      dependency(id: "com.fasterxml.jackson.core:jackson-databind:2.10.3")
      dependency(id: "com.google.inject:guice:4.2.3")
      dependency(id: "com.inversoft:jackson5:${jackson5Version}")
      dependency(id: "com.inversoft:java-error:${javaErrorVersion}")
      dependency(id: "com.inversoft:restify:${restifyVersion}")
      dependency(id: "io.fusionauth:fusionauth-java-client:${fusionauthVersion}")
      dependency(id: "org.slf4j:slf4j-api:1.7.30")
    }
    group(name: "runtime") {
      dependency(id: "ch.qos.logback:logback-classic:1.2.3")
      dependency(id: "ch.qos.logback:logback-core:1.2.3")
      dependency(id: "org.ow2.asm:asm:7.3.1", skipCompatibilityCheck: true)
    }
    group(name: "test-compile") {
      // Required for testng-7.3.0
      dependency(id: "org.testng:testng:7.3.0")
      dependency(id: "com.google.guava:guava:27.1.0-jre", skipCompatibilityCheck: true)
    }
  }

  publications {
    standard()
  }
}

// Plugins
database = loadPlugin(id: "org.savantbuild.plugin:database:1.0.6")
dependency = loadPlugin(id: "org.savantbuild.plugin:dependency:1.0.2")
java = loadPlugin(id: "org.savantbuild.plugin:java:1.2.0")
javaTestNG = loadPlugin(id: "org.savantbuild.plugin:java-testng:1.0.8")
idea = loadPlugin(id: "org.savantbuild.plugin:idea:1.0.1")
release = loadPlugin(id: "org.savantbuild.plugin:release-git:${savantVersion}")
file = loadPlugin(id: "org.savantbuild.plugin:file:1.0.2")

idea.settings.moduleMap = [
    "io.fusionauth:fusionauth-java-client:${fusionauthVersion}" : "fusionauth-java-client",
]

java.settings.javaVersion = "14"
javaTestNG.settings.javaVersion = "14"

java.settings.compilerArguments = "--enable-preview -source 14"

target(name: "clean", description: "Cleans the build directory") {
  java.clean()
}

target(name: "compile", description: "Compiles the Java source files") {
  java.compile()
}

target(name: "config", description: "Configure FusionAuth for load testing") {
  ["mysql", "postgresql"].each { type ->
    database.settings.type = type
    database.settings.name = "fusionauth"

    // Insert a test API key
    database.execute(file: "src/test/db/authentication_key.sql")
  }
}

target(name: "jar", description: "Builds the project JARs", dependsOn: ["compile"]) {
  java.jar()
}

target(name: "test", description: "Runs the project's tests", dependsOn: ["jar"]) {
  javaTestNG.settings.jvmArguments = "--enable-preview"
  javaTestNG.test()
}

target(name: "int", description: "Releases a local integration build of the project", dependsOn: ["jar"]) {
  // Copy all compile dependencies to be able to run command line
  dependency.copy(to: "build/dist/lib") {
    dependencies(group: "compile", transitive: true, fetchSource: false)
    // Get rid of a slf4j warning by copying runtime deps (gets the logback-classic in the classpath)
    dependencies(group: "runtime", transitive: false, fetchSource: false)
  }

  // Copy the JARs over
  file.copy(to: "build/dist/lib") {
    fileSet(dir: "build/jars", includePatterns: [/${project.name}-${project.version}.jar/])
  }

  // Copy the scripts over
  file.copy(to: "build/dist") {
    fileSet(dir: "src/main/script", includePatterns: [/.*/])
    fileSet(dir: "src/main/resources", includePatterns: [/.*/])
  }
}

target(name: "release", description: "Releases a full version of the project", dependsOn: ["int"]) {
  release.release()
}

target(name: "idea", description: "Updates the IntelliJ IDEA module file") {
  idea.iml()
}

target(name: "print-dependency-tree", description: "Prints the dependency tree") {
  dependency.printFull()
}
